<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Hostel Chat Bot - Tasks</title>
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="../static/images/favicon-16x16.png"
    />
    <link rel="stylesheet" href="../static/CSS/tasks.css" />
  </head>
  <body>
    <div class="container">
      <div class="home">
        <button id="homebtn" class="button-64" role="button">
          <span class="text">Home</span>
        </button>
      </div>

      <input
        type="text"
        name="tasks"
        id="mytask"
        placeholder="Search your task here"
        onkeyup="myfunction()"
      />

      <table id="mytable">
        <thead>
          <tr>
            <th>Status</th>
            <th>Name</th>
            <th>Phone No.</th>
            <th>Hostel</th>
            <th>Room No.</th>
            <th>Problem</th>
            <th>Comment</th>
          </tr>
        </thead>

        <tbody>
          <%x.forEach((y)=>{%>

          <tr>
            <td><input type="checkbox" class="save-cb-state" name=<%=y._id%>> </td>
            <td><%=y.name%></td>
            <td><%=y.phone%></td>
            <td><%=y.hostel%></td>
            <td><%=y.room%></td>
            <td><%=y.problem%></td>
            <td><%=y.comment%></td>
          </tr>

          <%})%>
        </tbody>
      </table>
    </div>

    <script>
      // Avoid scoping issues by encapsulating code inside anonymous function
      (function () {
        // variable to store our current state
        var cbstate;

        // bind to the onload event
        window.addEventListener("load", function () {
          // Get the current state from localstorage
          // State is stored as a JSON string
          cbstate = JSON.parse(localStorage["CBState"] || "{}");

          // Loop through state array and restore checked
          // state for matching elements
          for (var i in cbstate) {
            var el = document.querySelector('input[name="' + i + '"]');
            if (el) {
              el.checked = true;
              el.disabled = true;
            }
          }

          // Get all checkboxes that you want to monitor state for
          var cb = document.getElementsByClassName("save-cb-state");

          // Loop through results and ...
          for (var i = 0; i < cb.length; i++) {
            //bind click event handler
            cb[i].addEventListener("click", function (evt) {
              // If checkboxe is checked then save to state
              if (this.checked) {
                cbstate[this.name] = true;
                this.disabled = true;
              }

              // Else remove from state
              else if (cbstate[this.name]) {
                delete cbstate[this.name];
              }

              // Persist state
              localStorage.CBState = JSON.stringify(cbstate);
            });
          }
        });
      })();
    </script>

    <script>
      function myfunction() {
        let filter = document.getElementById("mytask").value.toUpperCase();
        let mytable = document.getElementById("mytable");
        let tr = mytable.getElementsByTagName("tr");

        for (var i = 0; i < tr.length; i++) {
          let td = tr[i].getElementsByTagName("td")[5];

          if (td) {
            let textvalue = td.textContent || td.innerHTML;

            if (textvalue.toUpperCase().indexOf(filter) > -1) {
              tr[i].style.display = "";
            } else {
              tr[i].style.display = "none";
            }
          }
        }
      }

      document.getElementById("homebtn").addEventListener("click", function () {
        window.location.href = "/";
      });
      
    </script>
  </body>
</html>
